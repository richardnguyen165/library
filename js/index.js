// Examples generated by CHATGPT


/*
Personal examples to test the library
let myLibrary = [
  new Book('Harry Potter and the Sorcerer\'s Stone', 'J.K. Rowling', 309, 1997),
  new Book('To Kill a Mockingbird', 'Harper Lee', 281, 1960),
  new Book('1984', 'George Orwell', 328, 1949),
  new Book('The Great Gatsby', 'F. Scott Fitzgerald', 180, 1925),
  new Book('The Hobbit', 'J.R.R. Tolkien', 310, 1937),
  new Book('A Tale of Two Cities', 'Charles Dickens', 489, 1859),
  new Book('The Silent Forest', 'Ava Norwood', 276, 2019),
  new Book('Echoes of Tomorrow', 'Riley Quinn', 312, 2023),
  new Book('The Paper Castle', 'Lena Harrow', 354, 2021),
  new Book('Dreamers of the Deep', 'C. J. Wren', 298, 2022),
  new Book('A Clockwork Orange', 'Anthony Burgess', 192, 1962),
  new Book('Moss and Stone', 'Serena Vale', 275, 2020),
  new Book('The Midnight Library', 'Matt Haig', 304, 2020),
  new Book('Fahrenheit 451', 'Ray Bradbury', 194, 1953),
  new Book('Whispers in the Wind', 'Morgan Elms', 332, 2024),
  new Book('The Last Horizon', 'Elliot Kane', 361, 2025),
  new Book('Pride and Prejudice', 'Jane Austen', 279, 1813),
  new Book('Brave New World', 'Aldous Huxley', 268, 1932),
  new Book('The Forgotten Code', 'Zane Rook', 387, 2023),
  new Book('Crimson Rivers', 'Isla Maren', 310, 2024)
];
*/

// Universal code, helps load the library and the sort setting
let myLibrary = JSON.parse(localStorage.getItem('myLibrary')) || [
  new Book('Harry Potter and the Sorcerer\'s Stone', 'J.K. Rowling', 309, 1997),
  new Book('To Kill a Mockingbird', 'Harper Lee', 281, 1960),
  new Book('1984', 'George Orwell', 328, 1949),
  new Book('The Great Gatsby', 'F. Scott Fitzgerald', 180, 1925),
  new Book('The Hobbit', 'J.R.R. Tolkien', 310, 1937),
  new Book('A Tale of Two Cities', 'Charles Dickens', 489, 1859),
  new Book('The Silent Forest', 'Ava Norwood', 276, 2019),
  new Book('Echoes of Tomorrow', 'Riley Quinn', 312, 2023),
  new Book('The Paper Castle', 'Lena Harrow', 354, 2021),
  new Book('Dreamers of the Deep', 'C. J. Wren', 298, 2022),
  new Book('A Clockwork Orange', 'Anthony Burgess', 192, 1962),
  new Book('Moss and Stone', 'Serena Vale', 275, 2020),
  new Book('The Midnight Library', 'Matt Haig', 304, 2020),
  new Book('Fahrenheit 451', 'Ray Bradbury', 194, 1953),
  new Book('Whispers in the Wind', 'Morgan Elms', 332, 2024),
  new Book('The Last Horizon', 'Elliot Kane', 361, 2025),
  new Book('Pride and Prejudice', 'Jane Austen', 279, 1813),
  new Book('Brave New World', 'Aldous Huxley', 268, 1932),
  new Book('The Forgotten Code', 'Zane Rook', 387, 2023),
  new Book('Crimson Rivers', 'Isla Maren', 310, 2024)
];
let sortMode = JSON.parse(localStorage.getItem('sort')) || 'date';
if (sortMode){
  sortLibraryBooks();
}
displayBooks();


// References and event listenets to add and sort buttons
const addButton = document.querySelector('.content-action-add');

addButton.addEventListener('click', () => addBookToLibraryModal());

const sortButton = document.querySelector('.content-action-sort');

sortButton.addEventListener('click', () => sortLibraryBooksModal());

// Book object
function Book(title, author, pages, publishYear, read = false) {
  // the constructor...
  this.title = title;
  this.author = author;
  this.pages = pages;
  this.publishYear = publishYear;
  this.read = read;
  this.id = crypto.randomUUID();
  this.date = JSON.stringify(new Date());
}

// Creates a modal that allows the user to interact with in order to add a book
function addBookToLibraryModal(){
  // Referring to the body, and adding the modal
  const bodyRef = document.querySelector('body');
  bodyRef.classList.add('stop-scrolling');
  const bodyRefDivModal = document.createElement('div');
  bodyRefDivModal.classList.add('add-modal-container');

  // Modal html
  const modalHTML = 
  `
  <div class = "add-modal">
    <div class = "add-title">
      <p>Add Book</p>
    </div>

    <div class = "add-input">
      <div class = "input-field">
        <p>Title</p>
        <input class = "title-input" type = "text" required>
      </div>

      <div class = "input-field">
        <p>Author</p>
        <input class = "author-input" type = "text" required>
      </div>

      <div class = "input-field">
        <p>Pages</p>
        <input class = "pages-input" type = "number" min = "0" required>
      </div>

      <div class = "input-field">
        <p>Publish Year</p>
        <input class = "publish-year-input" type = "text" type = "number" min = "0" required>
      </div>
    </div>
    <div>
      <button class = "modal-add-book-button" >Add</button>
      <button class = "modal-cancel-book-button">Cancel</button>
    </div>
  </div>
  `;

  // Adding the modal
  bodyRefDivModal.innerHTML = modalHTML;
  bodyRef.appendChild(bodyRefDivModal);

  // References for cancel and add buttons
  const addButtonRef = document.querySelector('.modal-add-book-button');
  const cancelButtonRef = document.querySelector('.modal-cancel-book-button');

  // Cancel action

  cancelButtonRef.addEventListener('click', () => removeModal('.add-modal-container'));

  // Add action

  addButtonRef.addEventListener('click', () => {
    const titleInputRef = document.querySelector('.title-input');
    const authorInputRef = document.querySelector('.author-input');
    const pagesInputRef = document.querySelector('.pages-input');
    const publishYearInputRef = document.querySelector('.publish-year-input');

    if (!titleInputRef.value){
      alert('Title input blank!');
    }
    else if (!authorInputRef.value){
      alert('Author input blank!');
    }
    else if (!pagesInputRef.value){
      alert('Pages input blank!');
    }
    else if (!publishYearInputRef.value){
      alert('Publishing year input blank!');
    }
    else{
      removeModal('.add-modal-container');
      const newBook = new Book(titleInputRef.value, authorInputRef.value, pagesInputRef.value, publishYearInputRef.value);
      addBookToLibrary(newBook);
    }
  })
}

// Function responsible for removing a modal, can work with the sort or add modal
function removeModal(modalClass){
  const modalRef = document.querySelector(modalClass);
  const bodyRef = document.querySelector('body');
  bodyRef.classList.remove('stop-scrolling');
  modalRef.remove();
}

// Adding book to library action, redirects to displayBooks()
function addBookToLibrary(newBook) {
  // take params, create a book then store it in the array
  myLibrary.push(newBook);
  localStorage.setItem('myLibrary', JSON.stringify(myLibrary));
  displayBooks();
}

// Display books in content-grid
function displayBooks() {
  // Clears content grid
  const contentGridRef = document.querySelector('.content-grid');
  contentGridRef.innerHTML = '';

  // Iterates through myLibrary array, showing each one and generating HTML as well as adding event listeners to each 'card'
  for (let personBook of myLibrary){
    const newCard = document.createElement('div');
    newCard.classList.add('outerCardClass');
    newCard.classList.add(`card-${personBook.id}`);
    // Outer div -> does not have possition absolute, allows it to work with other cards

    // Card html
    const newCardHTML =
    `
    <div class = "card">
      <div class = "title-${personBook.id}">
        ${personBook.title}
      </div>

      <div class = "info-${personBook.id}">
        <div class = "author-${personBook.id}">
          <p>Author: ${personBook.author}</p>
        </div>

        <div class = "pages-${personBook.id}">
          <p>Pages: ${personBook.pages}</p>
        </div>

        <div class = "publishing-year-${personBook.id}">
          <p>Publishing Year: ${personBook.publishYear}</p>
        </div>

        <div class = "date-${personBook.id}">
          <p>Date Added: ${personBook.date.slice(1, 11)}</p> 
        </div>
      </div>

      <div class = "card-buttons-${personBook.id}">
        <button class = "read-button read-status-${personBook.id} ${personBook.read ? 'read' : 'unread'}">${personBook.read ? '<img src = ./images/book-open-blank-variant-outline.svg>' : '<img src = ./images/book.svg>'}${personBook.read ? 'READ' : 'UNREAD'}</button>
      </div>

      <button class = "cancel-button-${personBook.id} cancel-button"><img src = ./images/close-sm-svgrepo-com.svg></button>
    </div>
    `;
    newCard.innerHTML = newCardHTML;
    contentGridRef.append(newCard);

    // Action for read/unread button
    const readButtonRef = document.querySelector(`.read-status-${personBook.id}`);
    readButtonRef.addEventListener('click', () => {
      personBook.read = !personBook.read;
      localStorage.setItem('myLibrary', JSON.stringify(myLibrary));
      displayBooks();
    });

    // Action for cancel button
    const cancelButtonRef = document.querySelector(`.cancel-button-${personBook.id}`);
    cancelButtonRef.addEventListener('click', () => {
      myLibrary = myLibrary.filter(deleteBook => deleteBook.id !== personBook.id);
      localStorage.setItem('myLibrary', JSON.stringify(myLibrary));
      displayBooks();
    });
  }
}

// Funtion responsible for giving 5 sort options
function sortLibraryBooksModal(){
  const bodyRef = document.querySelector('body');
  // Prevents user from scrolling when modal appears
  bodyRef.classList.add('stop-scrolling');
  const bodyRefDivModal = document.createElement('div');
  bodyRefDivModal.classList.add('sort-modal-container');

  // Sort html
  const modalHTML = 
  `
  <div class = "sort-modal">
    <div class = "sort-title">
      <p>Sort Books</p>
    </div>

    <div class = "sort-input">
      <div class = "sort-input-block">
        <p>Sort By Book Titles (A-Z)</p>
        <input type = "radio" name = "sort" id = "title" ${sortMode === 'title' ? 'checked' : ''}/>
      </div>

      <div class = "sort-input-block">
        <p>Sort By Author</p>
        <input type = "radio" name = "sort" id = "author" ${sortMode === 'author' ? 'checked' : ''}/>
      </div>

      <div class = "sort-input-block">
        <p>Sort By Pages</p>
        <input type = "radio" name = "sort" id = "pages" ${sortMode === 'pages' ? 'checked' : ''}"/>
      </div>

      <div class = "sort-input-block">
        <p>Sort By Publishing Year</p>
        <input type = "radio" name = "sort" id = "publishing_year" ${sortMode === 'publishing_year' ? 'checked' : ''}"/>
      </div>

      <div class = "sort-input-block">
        <p>Sort By Date Added By User</p>
        <input type = "radio" name = "sort" id = "date" ${sortMode === 'date' ? 'checked' : ''}/>
      </div>
    </div>

    <div>
      <button class = "modal-sort-book-button">Sort</button>
      <button class = "modal-cancel-sort-book-button">Cancel</button>
    </div>
  </div>
  `;
  bodyRefDivModal.innerHTML = modalHTML;
  bodyRef.appendChild(bodyRefDivModal);

  // Cancel and sort button actions
  const cancelRef = document.querySelector('.modal-cancel-sort-book-button');
  cancelRef.addEventListener('click', () => removeModal('.sort-modal-container'));

  const sortRef = document.querySelector('.modal-sort-book-button');
  sortRef.addEventListener('click', () => {
    sortLibraryBooks();
  });
} 

// Responsible for doing the actual sorting of the books
function sortLibraryBooks(){

  // Get each input box, and check if they are checked
  const titleOptionRef = document.querySelector('#title');
  const authorOptionRef = document.querySelector('#author');
  const pagesOptionRef = document.querySelector('#pages');
  const pubYearOptionRef = document.querySelector('#publishing_year');
  const dateOptionRef = document.querySelector('#date');

  // Explanation for coditional: either the input box exists and it has been checked, or it does not exist but the sort mode saved is equal to that mode
  if ((titleOptionRef && titleOptionRef.checked) || (!titleOptionRef && sortMode === 'title')){
    myLibrary.sort((a, b) => a.title.localeCompare(b.title));
    sortMode = 'title';
  }
  else if ((authorOptionRef && authorOptionRef.checked) || (!authorOptionRef && sortMode === 'author')){
    myLibrary.sort((a, b) =>  a.author.localeCompare(b.author));
    sortMode = 'author';
  } 
  else if ((pagesOptionRef && pagesOptionRef.checked) || (!pagesOptionRef && sortMode === 'pages')){
    myLibrary.sort((a, b) => a.pages - b.pages);
    sortMode = 'pages';
  }
  else if ((pubYearOptionRef && pubYearOptionRef.checked) || (!pubYearOptionRef && sortMode === 'publishing_year')){
    myLibrary.sort((a, b) => a.publishYear - b.publishYear);
    sortMode = 'publishing_year';
  }
  // Make sure to reconvert back to date so that you can make comparision
  else if ((dateOptionRef && dateOptionRef.checked) || (!dateOptionRef && sortMode === 'date')){
    myLibrary.sort((a, b) => new Date(a.date) - new Date(b.date));
    sortMode = 'date';
  }
  localStorage.setItem('sort', JSON.stringify(sortMode));
  // Incase if they are loading the books
  if (document.querySelector('.sort-modal-container')){
    removeModal('.sort-modal-container');
  }
  displayBooks();
}